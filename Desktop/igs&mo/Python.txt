https://www.edureka.co/
julekhak@gmail.com
Manyu@1990



Python
###########
Python programming tutorial - 1
################################
Python programming tutorial - 2
a. addition 
3 + 4 
7
b.subtraction
3 - 4 
-1
c. multiplication
3 * 20
60
d. division
18 / 4
3.0
18 // 4
4
18 % 4
2
5 * 5 * 5
125
5 ** 3

tuna = 5
20 + tuna
25

bacon + 16
bacon / tuna
3.6

######################################
Python Programming tutorial 3
singe quote or double quote are used to print in python.
\n is always considered as new line
if wanted to use \n then start with (r'C:\Bucky\Desktop\nosepieces')

first-name = "vishnu"
first-name + "shukla"

first-name + 5
'vishnu vishnu vishnu vishnu vishnu'

########################################
Python programming Tutorial - 4
user = "Tuna McFish"
user[0]
'T'
user[5]
'M'
user[-1]
'h'
user[-3]
'i'
user[2:7]
'na Mc'
user[2:]
'na McFish'
user[:]
'Tuna McFish'
Print ('something')
something
len('dafoeoojsdogjosoasj')
21
len(user)
11
####################www.Buckysroom.org/forum/##############
Python programming Tutorial -5

players = [29, 58, 66, 71, 87]
players[2]
66
players[2] = 68
players
[29, 58, 68, 71, 87]
players + [90, 91, 98]
[29, 58, 68, 71, 87, 90, 91, 98]
players
[29, 58, 68, 71, 87]
players.append(120)
players
[29, 58,68, 71, 87, 120]
Note: + changes on temporarly basis append changes on permanent basis
players[:2]
[29, 58]
players[:2] = [0, 0]
players
[0, 0, 68, 71, 87, 120]
players[:2] = []
players
[68, 71, 87, 120]
players[:] = []
players
[]
###############################################
Python proramming Tutorial- 6
when comparing 2 numbers we can use is




########################################################################################################
https://www.edureka.co/
julekhak@gmail.com
Manyu@1990

********************************************************************************************************
###############1
Introduction to Python and Scripting Concepts
In this module, you will learn the concepts of Python and Scripting
Topics to be covered in this module:
·         What is Python?
·         Python Features
·         Python Applications
·         What is Scripting?
·         Difference Between Scripting and Programming
·         Python Installation
·         Basics of Python – Comments, Literals, Indentation
·         Python Code Execution Flow

# comment
""" multiline comment



$$$$$$print.py
print("Hello")
print("World")
print("Hello world")
print("Hello,"+" how" +" are"+" you")

print("HELLO,","world")
#print(“Hello,”,”how”,”are”,”you”)
print("Hello,","world")
$$$$$$$$
####################2 Introduction to Data Types and Conditional Statements
In this module, you will learn basic data types of Python and decision-making statements
Topics to be covered in this module:
·         Identifiers
·         Reserved Keywords
·         Variables
·         Data Types
·         Operators
·         Conditional Statements
·         Loops


##Identifiers
*A Python identifier is a name used to identify
- variable
- fuction
- class 
- Module or other object
* An indetifier starts with any letter "A to Z" or "a to z" or an underscore followed by zero or letters, underscore and digits
* Python does not allow punctuation characters such as @, $, % as an identifier
* Python is a case sensitive language
   - Therefore, if you declare identifiers like Variable_1 and variable_1 then they will be treated differently
##Identifiers - Naming Conventions
* Class names start with an uppercase letter. All other identifiers start with a lowercase letter.
* Starting an identifier with a single leading uderscore indicate that the identifier is private.
* Starting an identifier with two leading underscores indicates a strongly private identifier
* If the idetifier also ends with two trailing underscores, the identifier is a language-defined special name,

##Reserver Keywords
* All the python keywords contain lowercase letters only
* Keywords can not be used as constant or varialbe or as identifier name
and	del	for	is	raise
assert	elif	from	lambda	return
break	else	global	not	try
class	except	if	or	while
continue	exec	import	pass	with
def	finally	in	print	yield

##Variables
* Varialbes are nothing but reserved memory locations to store values, This means that when you create a variable you reserve some space in memory
a =16
b =20
c = edu
##Variables(Contd.)
*Multiple Assignment
  - It is possible to assign the value to multiple variables to the same memory location.

a=b=c=1
print (a)
1
print (b)
1

  - Here, an integer object is created with the value 1 all three variables are assigned to the same memory location
  - You can also assign multiple objects to multiple varialbes

a,b,c=1,100,'python'
print(a)
1
print (b)
100
print (c)
python



###Standard Data Types
1. Immutable Data Types(It can't be changed)
a.Numbers
b.Strings
c.Tuples

2. Mutable Data Types(It can be changed)
a.Lists
  - List is a ordered set of elements enclosed within square brackets
  - Lists are Mutable; we can add or remove values
  - The main defferences between lists and Tuples are:
     - Lists are enclosed in brackets[] and Tuples are enclosed within parenthesis()
     - Lists are Mutable and Tuples are Immutable
b.Dictionaries
c.Sets


Example:
 Subjets = ["Maths", "Physics", Chemistry"]
 Print(Subjects)

'''
Indexing 
Physics = 0, Chemistry = 1, Maths = 2

'''
Print (Subjects[0:2])
Print (len(Subjects))

b.Dictionaries
* Python Dictionarie are of hash type
 - They work like associative arrays or hashes found in perl and consist of key-valuse pairs
* Properties
 - Accessed by key, not offset
 - Unordered collections of arbitrary objects
 - Variable-length, heterogeneous, and arbitrarily nestable
 - Mutable mapping
 - Tables of object references (hash tables)



key and value
Example:
d={1:'python', 2:'edureka'}
print(d)
{1: 'python', 2: 'edureka'}

print(d[2])
Edurekha
print (len(d))

###Sets
* Sets are neither mappings nor sequesces;
rather, they are unordered collections of unique and immutable objects.
* sets are created by calling the built-in set functions.

Exam:
it's" or "license" for more information.
set1={1,3,5,7.9}
set2={2,4,6,8}
print(set1)
{9,3,1,5,7}
print(set2)
{8,2,4,6}


numbers = [1,3,5,6,7,6]

print(numbers)

print(set(numbers))

###Immutaable data types

Numeric(Numbers)
*Python supports four different numerical values
 - int(signed integers) ex a = 10
 - long (long integers) 
 - float (floating point real values) ex b = 10.65
 - complex (complex numbers) ex 10+6J

*Python also supports other numrical values
 - binary
 - Octal
 - Hexadeciman


a = 10
b = 10.54
c = 10+8j

print(a,b,c)
print(int(b), float(a))

###Strings
*The continuous set of characters represents within quotation is called as string
*Python allows for either pairs of single or double quotes
*String are immutable
*Python does not support a character type; these are treated as strings of length one. thus considered as a substring.
*Subnets of string can be taken using the slice operator []and [:] with indexes starting at 0 in the beginning of the string and working their way from -1 at the end

Ex: 
= "edurekha"

'''
e = 0, d 1
'''

print(a[::-1])
print(a[0:2])
print(len(a))


###Tuples
*Tuples are immutable
 - A value assigned to Tuple cannot be changed
* Tuples consists of a number of values seprated by commas.
* Adding elements to a Tuple is not possible; Tuples have no append or extend method
* Similarly removing elements from a tuple is not allowed; Tuples have no remove or pop method.

Touples are faster than lists
Ex:
a = (1,2,4,"subjects")
print(a)
print(len(a))



###Operators
* As we are using variables of different data types in program, certain operations are performed on variables in order to get expected result.
* Operators are used to perform operations on operand (like numbers, strings)
*Example: a = 5
          b = 5
		a + b a - b
* In given example, variables a and b are operands and operations (like addition, subtraction) are performed on them.

Operators:
1. Arithmetic (+,-,*,/,**(exponent),%,//(float division))
Ex:
a = 21
b = 10
c = 0

c = a + b
print("Line1 - value of c is", c)

c = a - b
print("Line2 - value of c is", c)

c = a * b
print("Line3 - value of c is", c)

c = a / b
print("Line4 - value of c is", c)

c = a % b
print("Line5 - value of c is", c)

c = a**b
print("Line6 - value of c is", c)

c = a // b
print("Line7 - value of c is", c)
2. Assignment(assign value from right to left)
Ex:
a = 21
b = 10
c = 0

c = a + b
print("Line1 - value of c is", c)

c += a
print("Line2 - value of c is", c)

c *= a
print("Line3 - value of c is", c)

c /= a
print("Line4 - value of c is", c)

c %= a
print("Line5 - value of c is", c)

c **= a
print("Line6 - value of c is", c)

c //= a
print("Line7 - value of c is", c)

3. Comparison
	equal to a==b
	not equal to a!=b
	Greater than a > b
	Less than a > b
	Greater Than Equal to a>=b
	Less Than Equal to a <= b
Ex:
a = 21
b = 10
c = 0

if ( a == b ):
    print ("Line1 - value of c is", c)
else:
    print ("Line1 - value of c is")
if ( a != b ):
    print ("Line1 - value of c is", c)
else:

4. Logical
	and, or, not
and 
1	1	1
1	0	0
0	1	0
0	0	0
Ex:
a=1
b=0

print (a and b)

or
1	1	1
0	1	1
1	0	1
0	0	0
Ex:
a=0
b=0

print (a or b)

not(always opposite)
Ex:
a=0
b=0

print (not a)


5. Bitwise
Binary AND	a&b
Binary OR	a|b
Binary XOR	a^b
binary NOT	a~b
binary left shift	a<<
binary right shift	a >>b

Ex:
a=60     # 69 = 0011 1100
b=13     # 13 = 0000 1101
c=0
c = a & b# 12 = 0000 1100
print ("line1 - value of c is ", c)

c = a | b# 12 = 0000 1100
print ("line1 - value of c is ", c)

c = a ^ b# 12 = 0000 1100
print ("line1 - value of c is ", c)

c = ~a# 12 = 0000 1100
print ("line1 - value of c is ", c)

c = a << b# 12 = 0000 1100
print ("line1 - value of c is ", c)



6. identity
is - Evaluates to true if the variables on either side of the operator point to the same object and false otherwise.
is not - Evaluates to false if the variables on either side of the operator point to the same object and true otherwise.

Ex:

a=20
b=21

if (a is not b):
        print (" Line 1 - a and b have smae identity")
else:
        print("Line 1 -a and b do not have same identity")

7. Membership
in - Evaluated to true if it finds a variable in the specified sequence and false otherwise.
not in - Evaluates to true if it does not find a variable in the specified sequence and false otherwise.

Ex:
a=10
b=20

list = [1,2,3,4,5];
if (a in list):
    print ("Line 1 - a is variable in the given list")
else:
    print ("Line 1 - a is not available in the given list")

    print (a not in list)



#####Conditional Statements
Conditional Statements are used to execute a statement or a group of statements, when some condition is true

if->elif->else

#####Loops
* In general, statements are executed sequentially
- The first statement is a function is executed first, followed by the second, and so on
- There may be a situation when you need to execute a block of code several number of times

* Programming languages provide various control structures which allows more complicated execution paths

* A loop statement allows us to excute a statement or group of statents multiple times

##While loop
While loops are known as indefinite or conditional loops. They will keep iterating until certail conditions are met. There is no guarantee ahead of time regarding how many times the loop will iterate

Syntax:
while expression:
    statements

###For loop
For loop is a python loop which repeats a group of statments a specified number of times. the for loop provides a syntax where the following information is provided:
- Boolean condition
- The initial value of the counting variable
- Incrementation of counting variable

Ex:
num = int(input("number: "))
factorial = 1
if num < 0:
    print ("must be positive")
elif num == 0:
    print("factorial = 1")
else:
    for i in range(1, num+1):
        factorial = factorial * i

print(factorial)


###Nested loops
* You can use one or more loops inside any while, for loop.
for x in range(1,3):
for y in range(1,5):
print(%d * %d = %d' % (x, y, x*y))

####Loop Control statements
* Loop control statements change excution from its normal sequence, when execution leave a scope, all automatic objects that were created in that scope are destroyed

Control Statement
Break Statment: Terminates the loop statement an dtransfers execution to the statement immediately following the loop.

Continue statement: Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating

Pass statement: The pass statement in Python is used when a statement is required systactically but you do not want any command or code ro execute.


**************************************************************************
Module 3 Recording
Deep Dive into Data Types
1. Number
2. String
3. Tuples
4. List
5. Dictionaries
6. Sets


##Topics to be covered in this module:
#Various operations on:

1 Numbers
  Number data types are used to store numreric values.
  3 different numerical types in python
  Integer type : A = 16
  Float type : B = 1.234
  complex type : c = 2+ i6

Python supports different numerical values
*Integers
 - Examples: 0, 1, 1234, -56
 - Integers are implemented as C longs
 - Note: Dividing an integer by another integer will return only the integer part of the quotient, e.g. typing 7/2 will yield 3
* Long Integers
 - Example: 999999999999999999L
 - Must end with either I or L
* Floating point numbers
 - Examples: 0., 1.0, 1e10, 3.14e-2, 6.99E4
 - Implemented as C doubles
 - Division workd normally for floating point  numbers: 7./2. = 3.5
 - Operation involving both floats and integers will yield floats:
 6.4-2=4.4
* Complex numbers
 - Examples: 3+4J, 3.0+4.0j,2J
 - Must end with j 0r J


EX: 
import math
# returns the absolute value
print ("abs(-45)) : ", abs(-45))

# returns  the smallest integer, not less than the number
print ("math.ceil(1234.234): ", math.ceil(1234.234))

# returns exponential
print ("math.exp(11.72): ", math.exp(2))

# returns the absolute value
print ("math.fabs(-34): ", math.fabs(-34))

# retunrs larget integer not greater than use number
print ("math.floor(56.72): ", math.floor(56.72))

# returns the natural log
print ("math.log(45)): ", math.log(45))

# returns base-10 log
print("math.log10(34): ", math.log10(34))

# returns largest of its arguments.
print ("max(45,453,5443): ", max(45,453,5443))

# returns smallest of its arguments
print ("min(-54,-34,23):", min(-54,-34,23))

# returns the fractional and integer parts, in a two-item tuple
print("math.modf(100.12): ", math.modf(100.12))

# returns the value of x to the power y
print("math.pow(2, 4): ", math.pow(2,4))

# returns x rounded to n digits from the decimal point
print("round(80.23456, 2): ", round(80.23456, 2))

# returns the esquare toot of a number
print("math.sqrt(7) : ", math.sqrt(7))

  Numbers - Mathematical Operations
  * Some Mathematical operations performed on numerical values
 - x be any number
	abs(x)		log10(x)
	ceil(x)		max x1,x2....
	comp(x,y)	min x1,x2...
	exp(x)		modf(x)
	fabs(x)		pow(x,y)
	floor(x)	roundx[,n]
	log(x)		sqrt(x)


Numbers - Trigonometric Operations
Python Incloudes following functions to perform Trigonometric calculation

acos(x)		sin(x)
asin(x)		tan(x)
atan(x)		degrees(x)
cos(x)		radians(x)

Ex:
import math

print(math.cos(0))
print(math.sin(math.pi/2))

x=math.pi/2
print(math.degrees(x))



	
2 Strings
 - Strings are amongst the most popular types in python
 - Strings can be created by enclosing characters inside a single quote or double quotes
 - Unlike java, the '+' does not automatically convert numbers or other types to sting form. The str() function converts values to a string form so they can be combined with other strings

EX: 
string1='welcome'
print(string1)

string2="welcome2"
print(string2)

string3="""welcome3"""
print(string3)

Operations on Strings-1
* Indexing and Slicing Operations
 - In python indexing start from 0
 - A string 's' will have indexes running from 0 to len(s)-1 (where len(s)) is the length of s) in integer quantities
 - s[i] fetches the ith element in s

* Membership checking
 - In - Returns true if a character exists in the given string

Ex:
string='python'

print(string)
print(len(string))
print(string[0:4])
print(string[:3])

print 't' in string
print 'n' not in string


Operations on String-2
* String formatting operators
 - This operator is unique to string and makes up for the pack of having functions from C's print() family

%c	%X
%s	%e
%I	%E
%d	%f
%u	%g
%o	%G
%x

""""""""""""""
"welcome to %s"%("python")

"my name is %s, my age is %d"%("ana", 22)
""""""""""""""

Built-in String Method-1
*Caitalize(): Capitalizes first letter of string

"""""""""""""""""""""
string="python"
string.capitalize()
"""""""""""""""""""""

* count(str, beg=0, end=len(string)):counts how many times str occurs in a string , or in a substring of string, if starting index 'end' are given
""""""""""
string="edureka"
string.count("ka",0,len(string))
1
""""""""""

*encode(encoding='UTF-8', error='strict'): Returns encoded string version of s string, on error, default is to raise a ValueError unless error is given with 'ignore' or 'replace'

"""""""""""
string="edureka"
s=string.encode('utf-8', 'strict')
print(s)
"""""""""""

Built-in string method-2
* Decode(encoding='UTF-8', errors='strict'): Decodes the string using the codec registered for encoding. Encoding defaults to the default string encoding.
"""""""""""
string="edureka"
s=s.decode('utf-8', 'string')
print(s)
"""""""""""

* max(str): Returns the max alphabetical character from the string str
* min(str): Returns the min alphabetical character from the string str

"""""
string="edureka"
print(max(string))
print(min(string))
"""""


More String Methods
*Replace(old, new[, max]): replaces all occurrences of old in string with new or at most max occurrence if max given

* upper(): Convert lowercase letters in a string to uppercase

* index(str, beg=0, end(string)): Same as find(), but raises an exception if 'str' not found 

""""""""""
string="edureka"
print(string.replace("e", "--E--", 1))

print(string.upper())
print(string.lower())
print(string.index("k"))
""""""""""

* Lists
 - List is the most versatile datatype available in python which can be written as a list of comma separated values (items) between square brackets

Ex: list1 = ['phycics', 'chemistry', 1997, 2000]

Method of list
List.apppend(obj): add an item to the end of the list
List.extend():Extend the list by appending all the items in the given list
List.insert(insert an item at a given position


* Toupls
 - A couple is a sequence of immutable python objects. Tuples are sequences, just like lists.
Ex: Tup1 = ('physics','chemistry, 1997, 2000)

# There are some built-in functions performed on Tuple

Functions		Description
len(tuple)		Given the total length of the couple
Max(tuple)		Returns item from the Tuple with max value
min(tuple)		Returns item from the Tuple with min value
tuple(list_name)	Converts a list into Tuple

Basic Tuple operations
Operations		results		Description
len(1,2,3)		3		Length
1,2,3+4,5,6		1,2,3,4,5,6	Concatenation
'python'*2		pythonpython	Repetition
3 in 1,2,3		TRUE		Membership
For x in 1,2,3:print(x)	1,2,3		iteration
 
* Sets
* Dictionaries



ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDbtXUuKrH+KPREjCP7+ooigbapgl/wIqNUF/Mp7Ycz8f2/K2iGh1+bf+CqZU5oKbGbKzvr86K98x6ePnsqSwZUYXWbiDN9QeJOR6uuQ0VSozf9QKVm+lbQSv6SJbH6jLeYL8HPOwTpyen46EU6rRz1KmG9OkPf1btRiRfxBcT4mhkIOnDR5vY2kL2AlzB3vWCOal84jr9qk3Mu93XdEDh7zJK30y3Z93aF9QHzNTusk+EOsqKs5FSkCujMK1UNI4RKcJQ7DuIbPwMnibWO1+8zdMWV6bHvTo7B/QR9myH+qp2utoIfTBPowHI2su1DYoSPAgq9yuJQNz9qWK6zmkIz root@MacBook-Pro.Creditshelf










  







































